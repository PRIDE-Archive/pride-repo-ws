variables:
  SPRING_CONFIG_MAP: spring-configmap-$CI_PIPELINE_IID
  FILEBEAT_CONFIG_MAP: filebeat-config-$CI_PIPELINE_IID
  DOCKER_PULL_SECRET: pride-gitlab-docker-secret
  IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA

docker_build:
  image: docker:18.09
  stage: build
  services:
    - docker:18.09-dind
  script:
    - apk add --update bash gettext tzdata coreutils
    - envsubst '${JAR_FILE_NAME}' < .Dockerfile > Dockerfile
    - docker info
    - docker build -t $IMAGE .
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker push $IMAGE
  when: manual

#kube_deploy_prod_hh:
#  environment: prod-k8s-hh
#  extends: .kube_deploy_script

kube_deploy_prod_hx:
  environment: prod-k8s-hx
  extends: .kube_deploy_script

.kube_deploy_script:
  stage: deploy
  image: dtzar/helm-kubectl
  script:
    - apk add --update bash gettext tzdata coreutils
    - export HOSTNAME_BCKUP=$HOSTNAME && export HOSTNAME='${HOSTNAME}'
    - envsubst < config/.application.yml > config/application.yml
    #    - envsubst < .filebeat.yml > filebeat.yml
    - export HOSTNAME=$HOSTNAME_BCKUP
    - mkdir -p ~/.kube
    - echo $KUBE_CONFIG > kubeconfig
    - base64 -d kubeconfig > ~/.kube/config
    - kubectl config get-contexts
    - kubectl create namespace $k8s_namespace || true
    - kubectl -n $k8s_namespace delete secret $DOCKER_PULL_SECRET || true
    - kubectl -n $k8s_namespace create secret docker-registry $DOCKER_PULL_SECRET --docker-server=$CI_REGISTRY --docker-username=$CI_DEPLOY_USER --docker-password=$CI_DEPLOY_PASSWORD
    # create configmap for first time
    - kubectl -n $k8s_namespace create configmap $SPRING_CONFIG_MAP --from-file=config/application.yml || true
    # replace configmap if it already exists
    - kubectl -n $k8s_namespace create configmap $SPRING_CONFIG_MAP --from-file=config/application.yml -o yaml --dry-run | kubectl replace -f -
    # create configmap for first time
    #    - kubectl -n $k8s_namespace create configmap $FILEBEAT_CONFIG_MAP --from-file=filebeat.yml || true
    # replace configmap if it already exists
    #    - kubectl -n $k8s_namespace create configmap $FILEBEAT_CONFIG_MAP --from-file=filebeat.yml -o yaml --dry-run | kubectl replace -f -
    - envsubst < .kubernetes.yml > kubernetes.yml
    - cat kubernetes.yml
    - kubectl -n $k8s_namespace apply -f kubernetes.yml
  when: manual

.deploy_script:
  stage: deploy
  image: maven:3.3.9-jdk-8-alpine
  script:
    - apk add --update openssh-client bash openssl rsync gettext tzdata
    - eval $(ssh-agent -s)
    - mkdir ~/.ssh
    - chmod 700 ~/.ssh
    - echo $SSH_KEY | base64 -d | tr -d '\r' | ssh-add - > /dev/null
    - DEPLOY_SERVERS_ARRAY=(`echo $DEPLOY_SERVER | tr ',' ' '`)
    - for i in "${DEPLOY_SERVERS_ARRAY[@]}"; do ssh-keyscan $i >> ~/.ssh/known_hosts; chmod 600 ~/.ssh/*; done
    - export HOSTNAME_BCKUP=$HOSTNAME && export HOSTNAME='${HOSTNAME}'
    - envsubst < config/.application.yml > config/application.yml
    - chmod -R 700 config
    - (rm src/main/resources/application.properties || true)
    - export HOSTNAME=$HOSTNAME_BCKUP
    - mvn clean package -DjarFinalName=${JAR_FILE_NAME}
    - DEPLOY_DIR=$(date +"%Y%m%d_%H%M%S")
    - mkdir $DEPLOY_DIR
    - cp -r target/${JAR_FILE_NAME}.jar config $DEPLOY_DIR/
    - DEPLOY_SERVERS_ARRAY=(`echo $DEPLOY_SERVER | tr ',' ' '`)
    - ssh $SERVER_USER@${DEPLOY_SERVERS_ARRAY[0]} "bash && mkdir -p $DEPLOY_PATH"
    - rsync -a $DEPLOY_DIR $SERVER_USER@${DEPLOY_SERVERS_ARRAY[0]}:$DEPLOY_PATH/
    - ssh $SERVER_USER@${DEPLOY_SERVERS_ARRAY[0]} "bash && cd $DEPLOY_PATH && ln -snf $DEPLOY_DIR current"
    - for i in "${DEPLOY_SERVERS_ARRAY[@]}"; do ssh $SERVER_USER@$i "bash && cd $DEPLOY_PATH && (bash -l $STOP_SCRIPT || true) && (bash -l $START_SCRIPT > /dev/null 2>&1 &) && exit"; sleep 2m; done

#deploy_prod:
#  environment: prod
#  extends: .deploy_script
#  when: manual

deploy_dev:
  environment: dev
  extends: .deploy_script
  when: manual